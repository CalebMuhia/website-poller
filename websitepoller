#!/usr/bin/env python
import urllib2
import ssl
import os
import json


APP_NAME = 'Koodilehto Website Poller'
INTERNET_TEST = 'http://www.google.com'

SITEFILE = '.websitepollerrc'
SITEFILEPATH = os.getenv('HOME') + os.sep + SITEFILE
TIMEOUT = 5


try:
    """For Mac OSX use Growl notifier."""
    import gntp.notifier

    notification = gntp.notifier.mini
except ImportError:
    """For Linux try using Pynotigy."""
    try:
        import pygtk
        pygtk.require('2.0')
        import pynotify

        pynotify.init(APP_NAME)

        def gtk_out(data):
            n = pynotify.Notification(
                'Koodilehto Service Error',
                data
            )

            n.show()

        notification = gtk_out
    except ImportError:
        """All other systems get a printed line."""
        def out(data):
            print data

        notification = out


def poll(sites, timeout, ok, error):
    """Checks if the given URLs are online.
    sites - List of URLs to check.
    timeout - Timeout in seconds.
    ok - Function for printing information.
    error - Error reporting function.
    """
    for site in sites:
        ok('Polling ' + site)

        try:
            response = urllib2.urlopen(site, timeout=timeout)
            response.read()
        except urllib2.URLError as e:
            code = str(e.code) if hasattr(e, 'code') else ''
            error(site + ' ' + code)
        except ssl.SSLError as e:
            error(site + ' ' + e.message)
        except Exception as e:
            error(site + ' ' + e.message)
        else:
            ok('OK')


def empty(data):
    """Placeholder for now."""
    pass


def has_internet():
    """Test if we can connect to the Internet."""
    try:
        response=urllib2.urlopen(INTERNET_TEST, timeout=TIMEOUT)
        return True
    except urllib2.URLError as err: pass
    return False


def read_sites(filename):
    """Read the site URLs from the config file."""
    try:
        json_data = open(filename, "r")
        data = json.load(json_data)
        json_data.close()
        return data
    except IOError:
        notification('Please create file ' + SITEFILEPATH + ' containing the site list in JSON format.')
        return []


if __name__ == '__main__':
    if has_internet():
        sites = read_sites(SITEFILEPATH)
        poll(sites, timeout=TIMEOUT, ok=empty, error=notification)
